{"ast":null,"code":"import RPS_ABI from \"./RPS_ABI.json\";\nimport { BrowserProvider, Contract, parseEther, formatEther } from \"ethers\";\nimport { CONTRACT_ADDRESS } from \"./constants\";\nlet provider;\nlet signer;\nlet contract;\nlet winner;\nconst initialize = async () => {\n  if (typeof window.ethereum != \"undefined\") {\n    provider = new BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new Contract(CONTRACT_ADDRESS, RPS_ABI, signer);\n  } else {\n    console.error(\"MetaMask is needed!\");\n  }\n};\ninitialize();\nexport const requestAccount = async () => {\n  try {\n    const accounts = await provider.send(\"eth_requestAccounts\", []);\n    return accounts[0];\n  } catch (error) {\n    console.error(\"Error requesting account\");\n    return null;\n  }\n};\nexport const run = async () => {\n  const runtx = await contract.run();\n  await runtx.wait();\n  console.log(\"Game is done, winner decided!\");\n};\nexport const getWinner = async () => {\n  const getWinnertx = await contract.getWinner();\n  console.log(\"Winner is picked: \", getWinnertx);\n  winner = getWinnertx;\n  return getWinnertx;\n};","map":{"version":3,"names":["RPS_ABI","BrowserProvider","Contract","parseEther","formatEther","CONTRACT_ADDRESS","provider","signer","contract","winner","initialize","window","ethereum","getSigner","console","error","requestAccount","accounts","send","run","runtx","wait","log","getWinner","getWinnertx"],"sources":["/Users/ray/Developer/RPSGDApp/client/src/utils/contractServices.js"],"sourcesContent":["import RPS_ABI from \"./RPS_ABI.json\";\nimport {BrowserProvider, Contract, parseEther, formatEther} from \"ethers\";\nimport { CONTRACT_ADDRESS} from \"./constants\";\n\nlet provider;\nlet signer;\nlet contract;\nlet winner;\nconst initialize = async () => {\n    if (typeof window.ethereum != \"undefined\") {\n        provider = new BrowserProvider(window.ethereum);\n        signer = await provider.getSigner();\n        contract = new Contract(CONTRACT_ADDRESS, RPS_ABI, signer);\n    }\n    else {\n        console.error(\"MetaMask is needed!\");\n    }\n};\n\ninitialize();\n\nexport const requestAccount = async () => {\n    try{\n        const accounts  = await provider.send(\"eth_requestAccounts\", []);\n        return accounts[0];\n    }\n    catch (error) {\n        console.error(\"Error requesting account\");\n        return null;\n    }\n};\n\nexport const run = async () =>  {\n    const runtx = await contract.run();\n    await runtx.wait();\n    console.log(\"Game is done, winner decided!\");\n};\n\nexport const getWinner = async () => {\n    const getWinnertx = await contract.getWinner();\n    console.log(\"Winner is picked: \", getWinnertx);\n    winner = getWinnertx;\n    return getWinnertx;\n    \n};"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AACpC,SAAQC,eAAe,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAO,QAAQ;AACzE,SAASC,gBAAgB,QAAO,aAAa;AAE7C,IAAIC,QAAQ;AACZ,IAAIC,MAAM;AACV,IAAIC,QAAQ;AACZ,IAAIC,MAAM;AACV,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC3B,IAAI,OAAOC,MAAM,CAACC,QAAQ,IAAI,WAAW,EAAE;IACvCN,QAAQ,GAAG,IAAIL,eAAe,CAACU,MAAM,CAACC,QAAQ,CAAC;IAC/CL,MAAM,GAAG,MAAMD,QAAQ,CAACO,SAAS,CAAC,CAAC;IACnCL,QAAQ,GAAG,IAAIN,QAAQ,CAACG,gBAAgB,EAAEL,OAAO,EAAEO,MAAM,CAAC;EAC9D,CAAC,MACI;IACDO,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;EACxC;AACJ,CAAC;AAEDL,UAAU,CAAC,CAAC;AAEZ,OAAO,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAG;IACC,MAAMC,QAAQ,GAAI,MAAMX,QAAQ,CAACY,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAChE,OAAOD,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,CACD,OAAOF,KAAK,EAAE;IACVD,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;IACzC,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAMI,GAAG,GAAG,MAAAA,CAAA,KAAa;EAC5B,MAAMC,KAAK,GAAG,MAAMZ,QAAQ,CAACW,GAAG,CAAC,CAAC;EAClC,MAAMC,KAAK,CAACC,IAAI,CAAC,CAAC;EAClBP,OAAO,CAACQ,GAAG,CAAC,+BAA+B,CAAC;AAChD,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,WAAW,GAAG,MAAMhB,QAAQ,CAACe,SAAS,CAAC,CAAC;EAC9CT,OAAO,CAACQ,GAAG,CAAC,oBAAoB,EAAEE,WAAW,CAAC;EAC9Cf,MAAM,GAAGe,WAAW;EACpB,OAAOA,WAAW;AAEtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}